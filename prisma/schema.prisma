generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  email          String          @unique
  name           String?
  clerkId        String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  posts          Post[]
  settings       Settings?
  socialAccounts SocialAccount[]
  templates      Template[]
}

model Post {
  id               String         @id @default(cuid())
  title            String
  content          String
  formattedContent String?
  status           PostStatus     @default(DRAFT)
  imageUrl         String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  publishedAt      DateTime?
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  postTemplates    PostTemplate[]
  socialPosts      SocialPost[]
}

model Template {
  id            String         @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  isDefault     Boolean        @default(false)
  platform      Platform
  prompt        String
  postTemplates PostTemplate[]
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform, name])
}

model PostTemplate {
  id               String   @id @default(cuid())
  postId           String
  templateId       String
  platform         Platform
  generatedContent String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  post             Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  template         Template @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([postId, platform])
}

model Settings {
  id                String   @id @default(cuid())
  userId            String   @unique
  theme             Theme    @default(DARK)
  notifications     Boolean  @default(true)
  defaultTemplateId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SocialAccount {
  id             String       @id @default(cuid())
  userId         String
  platform       Platform
  accessToken    String
  refreshToken   String?
  tokenExpiresAt DateTime?
  platformUserId String
  username       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialPosts    SocialPost[]

  @@unique([userId, platform])
}

model SocialPost {
  id              String           @id @default(cuid())
  postId          String
  socialAccountId String
  platformPostId  String?
  status          SocialPostStatus @default(PENDING)
  publishedAt     DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  post            Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
  socialAccount   SocialAccount    @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)

  @@unique([postId, socialAccountId])
}

enum PostStatus {
  DRAFT
  PENDING
  PUBLISHED
  SCHEDULED
}

enum Theme {
  LIGHT
  DARK
}

enum Platform {
  LINKEDIN
  TWITTER
}

enum SocialPostStatus {
  PENDING
  PUBLISHED
  FAILED
}
